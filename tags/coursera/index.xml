<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coursera on Yan</title>
    <link>https://crazyxy.github.io/tags/coursera/</link>
    <description>Recent content in Coursera on Yan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/crazyxy&#34;&gt;Yan Xue&lt;/a&gt; 2017</copyright>
    <lastBuildDate>Sun, 16 Jul 2017 20:57:45 +0800</lastBuildDate>
    
	<atom:link href="https://crazyxy.github.io/tags/coursera/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Interesting Problems from Coursera</title>
      <link>https://crazyxy.github.io/post/interesting-problems-from-coursera/</link>
      <pubDate>Sun, 16 Jul 2017 20:57:45 +0800</pubDate>
      
      <guid>https://crazyxy.github.io/post/interesting-problems-from-coursera/</guid>
      <description>最近一直在Coursera上学习Princeton University的Algorithms。在学习过程中遇到了很多有趣的问题，在这里记录下来并分享给大家。
3-SUM $O(n^2)$ 时间复杂度的算法 3-SUM 问题如下，给定一个数组a[N]和x，问数组中存在几组(i,j,k), i&amp;lt;j&amp;lt;k使得a[i]+a[j]+a[k]=x。这道题早在Leetcode上就遇到了，具体的方法如下：
（为简单起见，假设所有元素均不相同）
// Step 1: 将数组按照升序排序 // Step 2: 最外层循环一次从0遍历到N // Step 3: 内层循环使用两个指针，分别指向i+1和N-1，问题变成了在一个数组中寻找一对数使它们的和为x-a[i]。 for(int i = 0; i &amp;lt; N; i ++){ int j = i + 1, k = N - 1; while(j &amp;lt; k){ int s = a[j]+a[k]+a[i]; if(s==x){ // find a new tuple break; }else if(s &amp;lt; x){ j ++; }else{ k --; } } }  在双调数组（bitonic array）中找一个元素，要求时间复杂度$O(log n)$ $\Theta(3 log n)$算法  先找出双调数组中的最大值 ===&amp;gt; $log n$次比较  int find_max(int* arr, int left, int right){ while(left + 1 &amp;lt; right){ int mid = (left + right) / 2; if(arr[mid] &amp;gt; arr[mid+1]){ right = mid; }else{ left = mid; } } return (arr[left] &amp;gt; arr[right] ?</description>
    </item>
    
  </channel>
</rss>
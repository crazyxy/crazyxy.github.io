<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Yan</title>
    <link>https://crazyxy.github.io/post/</link>
    <description>Recent content in Posts on Yan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/crazyxy&#34;&gt;Yan Xue&lt;/a&gt; 2017</copyright>
    <lastBuildDate>Sun, 03 Sep 2017 21:38:48 +0800</lastBuildDate>
    
	<atom:link href="https://crazyxy.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>is_callable implementation in C&#43;&#43;</title>
      <link>https://crazyxy.github.io/post/is_callable-in-c&#43;&#43;/</link>
      <pubDate>Sun, 03 Sep 2017 21:38:48 +0800</pubDate>
      
      <guid>https://crazyxy.github.io/post/is_callable-in-c&#43;&#43;/</guid>
      <description>今天在看一个C++11并发异步访问的时候看到了下面一段代码：
typedef char one[1]; typedef char two[2]; template&amp;lt;typename Func, typename... Args, typename = decltype(std::declval&amp;lt;Func&amp;gt;()(std::declval&amp;lt;Args&amp;gt;()...))&amp;gt; two&amp;amp; is_callable_helper(int); template&amp;lt;typename Func, typename... Args&amp;gt; one&amp;amp; is_callable_helper(...); template&amp;lt;typename T&amp;gt; struct is_callable; template&amp;lt;typename Func, typename... Args&amp;gt; struct is_callable&amp;lt;Func(Args...)&amp;gt;: public std::integral_constant&amp;lt;bool, sizeof(is_callable_helper&amp;lt;Func, Args...&amp;gt;(0)) - 1&amp;gt; {};  从函数的命名来看，is_callable是一个模版类，用来判断判断一个Func类型的函数能否使用参数Args进行调用，例如：
is_callable(function&amp;lt;void(int)&amp;gt;(int))::value; // true is_callable(function&amp;lt;void(int)&amp;gt;(string))::value; //false  这篇博客讨论如何实现is_callable。
C++ Member Detector 在这篇Wiki中讨论了如何实现Member Detector。通过运用Substitution Failure Is Not An Error (SFINAE)，重载一个测试的函数，通过最终的选择测试结果来判断是否存在某个属性。例如：
template&amp;lt;typename T&amp;gt; class DetectX { using Yes = char[2]; using No = char[1]; struct Fallback { int X; }; struct Derived : T, Fallback { }; template&amp;lt;typename U&amp;gt; static No &amp;amp; func(decltype(U::X) *); template&amp;lt;typename U&amp;gt; static Yes &amp;amp; func(U*); public: static constexpr bool RESULT = sizeof(test&amp;lt;Derived&amp;gt;(nullptr)) == sizeof(Yes); };  上面这段代码检查类型T中是否存在成员X，注意，这里无论X是什么类型。在类中定义了两个类型，Yes和No，作为返回类型用来区别最终选择的函数的结果。Fallback类型在结构体内定义了一个名为X的成员变量，而类Derived则继承自T和Fallback。如果类型T中存在名为X的成员变量，Derived类型中会有两个名为X的成员，decltype(U::X)将无法调用，而会选择调用第二个函数，如果T中不存在名为X的成员变量，则会成功调用第一个函数。最终痛过返回值判断类型T中是否存在名为X的成员变量。</description>
    </item>
    
    <item>
      <title>Applicative Functors Deduction</title>
      <link>https://crazyxy.github.io/post/applicative-functors-deduction/</link>
      <pubDate>Tue, 18 Jul 2017 14:52:52 +0800</pubDate>
      
      <guid>https://crazyxy.github.io/post/applicative-functors-deduction/</guid>
      <description>背景简介 在Haskell中，Functor和Applicative Functor的定义如下：
class Functor f where fmap :: (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b class (Functor f) =&amp;gt; Applicative f where pure :: a -&amp;gt; f a &amp;lt;*&amp;gt; :: f (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b  从上面的定义中可以看出，Functor和Applicative的instance都是type constructor，因为它需要吃一个类型a。许多type constructor都是Functor和Applicative的instance。例如Maybe，[]和(-&amp;gt;)r。
在上面三个类型中(-&amp;gt;)r最为怪异。它是一个function，并且一个吃了一个类型，只需要另外一个类型便可以construct一个新的类型。(-&amp;gt;)r的fmap，pure和&amp;lt;*&amp;gt;的实现如下：
instance Functor ((-&amp;gt;)r) where fmap f g = \r -&amp;gt; f (g r)  (-&amp;gt;)r的fmap函数实际上相当于.，因为fmap的类型为：
fmap :: (a -&amp;gt; b) -&amp;gt; (r -&amp;gt; a) -&amp;gt; (r -&amp;gt; b)  因此对于(-&amp;gt;)rFunctor，fmap = .</description>
    </item>
    
    <item>
      <title>Interesting Problems from Coursera</title>
      <link>https://crazyxy.github.io/post/interesting-problems-from-coursera/</link>
      <pubDate>Sun, 16 Jul 2017 20:57:45 +0800</pubDate>
      
      <guid>https://crazyxy.github.io/post/interesting-problems-from-coursera/</guid>
      <description>最近一直在Coursera上学习Princeton University的Algorithms。在学习过程中遇到了很多有趣的问题，在这里记录下来并分享给大家。
3-SUM $O(n^2)$ 时间复杂度的算法 3-SUM 问题如下，给定一个数组a[N]和x，问数组中存在几组(i,j,k), i&amp;lt;j&amp;lt;k使得a[i]+a[j]+a[k]=x。这道题早在Leetcode上就遇到了，具体的方法如下：
（为简单起见，假设所有元素均不相同）
// Step 1: 将数组按照升序排序 // Step 2: 最外层循环一次从0遍历到N // Step 3: 内层循环使用两个指针，分别指向i+1和N-1，问题变成了在一个数组中寻找一对数使它们的和为x-a[i]。 for(int i = 0; i &amp;lt; N; i ++){ int j = i + 1, k = N - 1; while(j &amp;lt; k){ int s = a[j]+a[k]+a[i]; if(s==x){ // find a new tuple break; }else if(s &amp;lt; x){ j ++; }else{ k --; } } }  在双调数组（bitonic array）中找一个元素，要求时间复杂度$O(log n)$ $\Theta(3 log n)$算法  先找出双调数组中的最大值 ===&amp;gt; $log n$次比较  int find_max(int* arr, int left, int right){ while(left + 1 &amp;lt; right){ int mid = (left + right) / 2; if(arr[mid] &amp;gt; arr[mid+1]){ right = mid; }else{ left = mid; } } return (arr[left] &amp;gt; arr[right] ?</description>
    </item>
    
    <item>
      <title>Delete And Successor</title>
      <link>https://crazyxy.github.io/post/delete-and-successor/</link>
      <pubDate>Fri, 14 Jul 2017 17:30:59 +0800</pubDate>
      
      <guid>https://crazyxy.github.io/post/delete-and-successor/</guid>
      <description>Problem Given a sequence a number $S=\{1&amp;hellip;n\}$ and a sequence of operations which contain two types of operation: delete and query. delte(x) delete $x$ from the sequence and query(x) return the successor of the $x$ in the sequence.
Solution Union-Find. When delete(x), union the subtree where $x$ is in and the subtree $x+1$ is in. The operation can be viewed as a fold operation which fold $x$ and $x+1$. When query(x), return the find(x+1).</description>
    </item>
    
  </channel>
</rss>
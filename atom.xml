<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Crazyxy is Coding</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://crazyxy.github.io/"/>
  <updated>2017-05-14T12:13:19.000Z</updated>
  <id>https://crazyxy.github.io/</id>
  
  <author>
    <name>Yan Xue</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LevelDB IV</title>
    <link href="https://crazyxy.github.io/2017/05/13/LevelDB-3/"/>
    <id>https://crazyxy.github.io/2017/05/13/LevelDB-3/</id>
    <published>2017-05-13T13:54:00.000Z</published>
    <updated>2017-05-14T12:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>This post explains the the <code>LRUCache</code> in LevelDB.</p>
<h2 id="1-Cache-interface"><a href="#1-Cache-interface" class="headerlink" title="1. Cache interface"></a>1. <code>Cache</code> interface</h2><p><code>Cache</code> locates in <em>include/leveldb/cache.h</em>. In provides following virtual functions:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Handle* Insert(const Slice&amp; key, void* value, size_t charge, void (*deleter)(const Slice&amp; key, void* value))</div><div class="line">Handle* Lookup(const Slice&amp; key)</div><div class="line">void Release(Handle* handle)</div><div class="line">void* Value(Handle* handle)</div><div class="line">void Erase(const Slice&amp; key)</div><div class="line">uint64_t NewId()</div><div class="line">void Prune()</div><div class="line">size_t TotalCharge()</div></pre></td></tr></table></figure>
<p>The implementations and usage of each function will be explained in the later sections.</p>
<h2 id="2-CacheHandle-implementation"><a href="#2-CacheHandle-implementation" class="headerlink" title="2. CacheHandle implementation"></a>2. <code>CacheHandle</code> implementation</h2><p>Before diving into the <code>LRUCache</code>, I will introduce the <code>LRUHandle</code> first, which is the entry in the <code>LRUCache</code>. <code>LRUCache</code> is commonly implemented by a hash table and a double linked lisk. The <code>LRUHandle</code> is defined as:</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LRUHandle</span>&#123;</span></div><div class="line">    <span class="keyword">void</span> *value;</div><div class="line">    <span class="keyword">void</span> (*deleter)(<span class="keyword">const</span> Slice&amp;, <span class="keyword">void</span>* value);</div><div class="line">    LRUHandle *next_hash; <span class="comment">//next element in the hash table</span></div><div class="line">    LRUHandle *next; <span class="comment">//next element in the double linked list</span></div><div class="line">    LRUHandle *prev; <span class="comment">//previous element in the double linked list</span></div><div class="line">    <span class="keyword">size_t</span> charge; <span class="comment">//sizeof the LRUHandle</span></div><div class="line">    <span class="keyword">size_t</span> key_length;</div><div class="line">    <span class="keyword">bool</span> in_cache;</div><div class="line">    <span class="keyword">uint32_t</span> refs;</div><div class="line">    <span class="keyword">uint32_t</span> hash;</div><div class="line">    <span class="keyword">char</span> key_data[<span class="number">1</span>]; <span class="comment">//placeholder for key_data</span></div><div class="line"></div><div class="line">    <span class="function">Slice <span class="title">key</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (next == <span class="keyword">this</span>)&#123;</div><div class="line">            <span class="keyword">return</span> *(<span class="keyword">reinterpret_cast</span>&lt;Slice*&gt;(value));</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> Slice(key_data, key_length);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-HandleTable-implementation"><a href="#3-HandleTable-implementation" class="headerlink" title="3. HandleTable implementation"></a>3. <code>HandleTable</code> implementation</h2><p><code>HandleTable</code> is the hash table used for <code>LRUCache</code>. Three public interfaces all depends on the function <code>FindPointer</code>, which is defined as:</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">LRUHandle** <span class="title">FindPointer</span><span class="params">(<span class="keyword">const</span> Slice&amp; key, <span class="keyword">uint32_t</span> hash)</span> </span>&#123;</div><div class="line">    LRUHandle** ptr = &amp;list_[hash &amp; (length_ - <span class="number">1</span>)];</div><div class="line">    <span class="keyword">while</span> (*ptr != <span class="literal">NULL</span> &amp;&amp; ((*ptr)-&gt;hash != hash || key != (*ptr)-&gt;key())) &#123;</div><div class="line">      ptr = &amp;(*ptr)-&gt;next_hash;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ptr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>FindPointer</code> tries to find a entry in the <code>list_</code>. If there is no such entry, it will return <code>NULL</code>, otherwise it returns the entry. There are three things we should notice here:</p>
<ol>
<li>The hash function used for hash table is <code>hash &amp; (length - 1)</code> which equals to <code>hash % length</code>;</li>
<li><code>FindPointer</code> returns a pointer to either the pointer who points to the specific entry or <code>NULL</code>;</li>
<li><code>FindPointer</code> returns a double pointers.</li>
</ol>
<p>The third point is very important. Let’s take a look at <code>Insert</code> and <code>Remove</code> implementation in <code>HandleTable</code></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function">LRUHandle* <span class="title">Insert</span><span class="params">(LRUHandle* h)</span> </span>&#123;</div><div class="line">    LRUHandle** ptr = FindPointer(h-&gt;key(), h-&gt;hash);</div><div class="line">    LRUHandle* old = *ptr;</div><div class="line">    h-&gt;next_hash = (old == <span class="literal">NULL</span> ? <span class="literal">NULL</span> : old-&gt;next_hash);</div><div class="line">    *ptr = h;</div><div class="line">    <span class="keyword">if</span> (old == <span class="literal">NULL</span>) &#123;</div><div class="line">        ++elems_;</div><div class="line">        <span class="keyword">if</span> (elems_ &gt; length_) &#123;</div><div class="line">            Resize();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> old;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This piece of code inserts an handle into hash table and return the old handle. <code>h-&gt;next_hash = (old == NULL ? NULL : old-&gt;next_hash)</code> sets the next element in the hash table. <code>*ptr=h</code> is very tricky. It chains <code>h</code> in the hash table. <code>**ptr</code> is the address of the last <code>LRUHandle</code>‘s <code>next_hash</code>. Therefore <code>*ptr=h</code> sets the address of <code>h</code> to the <code>next_hash</code>. By this way, <code>h</code> is inserted into the hash table.</p>
<p><code>Remove</code> uses the same method for removing an element from the hash table.</p>
<h2 id="4-LRUCache-implementation"><a href="#4-LRUCache-implementation" class="headerlink" title="4. LRUCache implementation"></a>4. <code>LRUCache</code> implementation</h2><p><code>ShardedLRUCache</code> <em>has a</em> <code>LRUCache</code> object and <code>ShardedLRUCache</code> <em>is a</em> <code>Cache</code>. The functions in <code>ShardedLRUCache</code> are all implementated by <code>LRUCache</code>. </p>
<p>In <code>LRUCache</code>, there are two double linked lists, <code>lru_</code> and <code>in_use</code>. Both of them are initialized with a dummy head whose <code>next</code> and <code>prev</code> pointers point to themselves. </p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">LRUCache::LRUCache() : usage_(<span class="number">0</span>) &#123;</div><div class="line">    lru_.next = &amp;lru_;</div><div class="line">    lru_.prev = &amp;lru_;</div><div class="line">    in_use_.next = &amp;in_use_;</div><div class="line">    in_use_.prev = &amp;in_use_;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">Cache::Handle* LRUCache::Insert(<span class="keyword">const</span> Slice&amp; key, <span class="keyword">uint32_t</span> hash, <span class="keyword">void</span>* value, <span class="keyword">size_t</span> charge, <span class="keyword">void</span> (*deleter)(<span class="keyword">const</span> Slice&amp; key, <span class="keyword">void</span>* value)) &#123;</div><div class="line">    <span class="function">MutexLock <span class="title">l</span><span class="params">(&amp;mutex_)</span></span>;</div><div class="line">    </div><div class="line">    LRUHandle* e = <span class="keyword">reinterpret_cast</span>&lt;LRUHandle*&gt;(<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LRUHandle)<span class="number">-1</span> + key.size()));</div><div class="line">    e-&gt;value = value;</div><div class="line">    e-&gt;deleter = deleter;</div><div class="line">    e-&gt;charge = charge;</div><div class="line">    e-&gt;key_length = key.size();</div><div class="line">    e-&gt;hash = hash;</div><div class="line">    e-&gt;in_cache = <span class="literal">false</span>;</div><div class="line">    e-&gt;refs = <span class="number">1</span>; </div><div class="line">    <span class="built_in">memcpy</span>(e-&gt;key_data, key.data(), key.size());</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (capacity_ &gt; <span class="number">0</span>) &#123;</div><div class="line">        e-&gt;refs++;</div><div class="line">        e-&gt;in_cache = <span class="literal">true</span>;</div><div class="line">        LRU_Append(&amp;in_use_, e);</div><div class="line">        usage_ += charge;</div><div class="line">        FinishErase(table_.Insert(e));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (usage_ &gt; capacity_ &amp;&amp; lru_.next != &amp;lru_) &#123;</div><div class="line">        LRUHandle* old = lru_.next;</div><div class="line">        assert(old-&gt;refs == <span class="number">1</span>);</div><div class="line">        <span class="keyword">bool</span> erased = FinishErase(table_.Remove(old-&gt;key(), old-&gt;hash));</div><div class="line">        <span class="keyword">if</span> (!erased) &#123;  <span class="comment">// to avoid unused variable when compiled NDEBUG</span></div><div class="line">            assert(erased);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;Cache::Handle*&gt;(e);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> LRUCache::FinishErase(LRUHandle* e) &#123;</div><div class="line">    <span class="keyword">if</span> (e != <span class="literal">NULL</span>) &#123;</div><div class="line">        assert(e-&gt;in_cache);</div><div class="line">        LRU_Remove(e);</div><div class="line">        e-&gt;in_cache = <span class="literal">false</span>;</div><div class="line">        usage_ -= e-&gt;charge;</div><div class="line">        Unref(e);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> e != <span class="literal">NULL</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The above code snippet is the insert of the <code>LRUCache</code>. Initially, the <code>refs</code> of <code>Handler</code> is set to 1 and if cache is enabled, <code>e-&gt;ref</code> and <code>e-&gt;in_cache</code> will change. <code>FinishErase</code> appears twice in this function. It removes elements which have been removed from hash table from the cache. The first <code>FinishErase</code> removes duplicate handle with the same key and the second <code>FinishErase</code> removes redundant elements from the <code>lru</code> to save memory.</p>
<h2 id="5-ShardedLRUCache-implementation"><a href="#5-ShardedLRUCache-implementation" class="headerlink" title="5. ShardedLRUCache implementation"></a>5. <code>ShardedLRUCache</code> implementation</h2><p><code>ShardedLRUCache</code> uses multiple <code>LRUCache</code> for load balance. There are totally 16 shards i.e. 16 <code>LRUCache</code> objects. <code>ShardedLRUCache</code> uses corresponding <code>LRUCache</code> method. For example, <code>Insert</code> in <code>ShardedLRUCache</code> is defined as:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">static inline uint32_t HashSlice(const Slice&amp; s) &#123;</div><div class="line">    return Hash(s.data(), s.size(), 0);</div><div class="line">&#125;</div><div class="line"></div><div class="line">static uint32_t Shard(uint32_t hash) &#123;</div><div class="line">    return hash &gt;&gt; (32 - kNumShardBits);</div><div class="line">&#125;</div><div class="line"></div><div class="line">virtual Handle* Insert(const Slice&amp; key, void* value, size_t charge, void (*deleter)(const Slice&amp; key, void* value)) &#123;</div><div class="line">    const uint32_t hash = HashSlice(key);</div><div class="line">    return shard_[Shard(hash)].Insert(key, hash, value, charge, deleter);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The first step is to find the correpsonding shard by hash value of key. The hash value if the first 4 bits of the hash value of key.</p>
<h2 id="6-Mutex"><a href="#6-Mutex" class="headerlink" title="6. Mutex"></a>6. Mutex</h2><p>Another topic of this blog is about <code>MutexLock</code>. It is a RAII implementation, i.e., when <code>MutexLock</code> object is initialized, it gets a <code>mutex</code>, which will be release when the object is destroyed. Autoptr in C++ is a similar case. </p>
<hr>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Progress (=========&gt;                                                  ?%):</span></div><div class="line"></div><div class="line">| - arena.&#123;h,cc&#125;         ------ Done</div><div class="line">| - bloom.cc             ------ Done</div><div class="line">| - cache.cc             ------ Done</div><div class="line">| - coding.&#123;h,cc&#125;</div><div class="line">| - comparator.h</div><div class="line">| - crc32c.&#123;h,cc&#125;</div><div class="line">| - env.cc</div><div class="line">| - env_posix.cc</div><div class="line">| - filter_policy.cc     ------ Done</div><div class="line">| - hash.&#123;h,cc&#125;          ------ Done</div><div class="line">| - histogram.&#123;h,cc&#125;</div><div class="line">| - logging.&#123;h,cc&#125;</div><div class="line">| - mutexlock.h          ------ Done</div><div class="line">| - options.cc</div><div class="line">| - posix_logger.h</div><div class="line">| - random.h</div><div class="line">| - status.cc</div><div class="line">| ...</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This post explains the the &lt;code&gt;LRUCache&lt;/code&gt; in LevelDB.&lt;/p&gt;
&lt;h2 id=&quot;1-Cache-interface&quot;&gt;&lt;a href=&quot;#1-Cache-interface&quot; class=&quot;headerlin
    
    </summary>
    
    
      <category term="LevelDB" scheme="https://crazyxy.github.io/tags/LevelDB/"/>
    
  </entry>
  
  <entry>
    <title>LevelDB III</title>
    <link href="https://crazyxy.github.io/2017/05/11/LevelDB-2/"/>
    <id>https://crazyxy.github.io/2017/05/11/LevelDB-2/</id>
    <published>2017-05-11T13:02:00.000Z</published>
    <updated>2017-05-13T13:54:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Util-structure"><a href="#1-Util-structure" class="headerlink" title="1. Util structure"></a>1. <code>Util</code> structure</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">| - arena.&#123;h,cc&#125;         ------ Done</div><div class="line">| - bloom.cc</div><div class="line">| - cache.cc</div><div class="line">| - coding.&#123;h,cc&#125;</div><div class="line">| - comparator.h</div><div class="line">| - crc32c.&#123;h,cc&#125;</div><div class="line">| - env.cc</div><div class="line">| - env_posix.cc</div><div class="line">| - filter_policy.cc</div><div class="line">| - hash.&#123;h,cc&#125;</div><div class="line">| - histogram.&#123;h,cc&#125;</div><div class="line">| - logging.&#123;h,cc&#125;</div><div class="line">| - mutexlock.h</div><div class="line">| - options.cc</div><div class="line">| - posix_logger.h</div><div class="line">| - random.h</div><div class="line">| - status.cc</div><div class="line">| ...</div></pre></td></tr></table></figure>
<p>This post tries to explain <code>bloom filter</code> in LevelDB. The theory and proof about bloom filter can be found <a href="https://en.wikipedia.org/wiki/Bloom_filter" target="_blank" rel="external">here</a>.</p>
<h2 id="2-Bloom-Filter-introduction"><a href="#2-Bloom-Filter-introduction" class="headerlink" title="2. Bloom Filter introduction"></a>2. <code>Bloom Filter</code> introduction</h2><p><em>Bloom Filter</em> is used for checking whether an element is in the set. Bloom filter is based on a group of $k$ hash functions, which map an element to $k$ values in a bit array. False positive matches are possible, but false negtive are not - in other words, a query returns either “possibly in set” or “definitely not in set”.</p>
<h2 id="3-bloom-cc-implementation"><a href="#3-bloom-cc-implementation" class="headerlink" title="3. bloom.cc implementation"></a>3. <code>bloom.cc</code> implementation</h2><h3 id="3-1-unnamed-namespace"><a href="#3-1-unnamed-namespace" class="headerlink" title="3.1 unnamed namespace"></a>3.1 unnamed namespace</h3><blockquote>
<p>When definitions in a .cc file do not need to be referenced outside that file, place them in an unnamed namespace or declare them static. Do not use either of these constructs in .h files. — From Google C++ Style Guide</p>
</blockquote>
<p>More details about unnamed namespace is <a href="http://www.comeaucomputing.com/techtalk/#nostatic" target="_blank" rel="external">here</a>. </p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">static</span> uint32_t <span class="title">BloomHash</span><span class="params">(<span class="keyword">const</span> Slice&amp; key)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Hash(key.data(), key.size(), <span class="number">0xbc9f1d34</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The unnamed namespace makes BloomHash local in file <code>bloom.cc</code>. <code>BloomHash</code> returns hash value of the <code>key</code> which is a <code>Slice</code> structure. <code>BloomHash</code> calls <code>Hash</code> in <code>hash.{h,cc}</code>. </p>
<p>LevelDB uses the hash function similar to murmur hash (excerpt from comments) and it is too complex for me to understand why murmur is a good hash function. But I don’t think not knowing the detail of murmur hash can affect the understanding of LevelDB. We only need to remember that <em>LevelDB uses a highly efficient hash function</em>, you don’t even need to remember the name. Haha. </p>
<h3 id="3-2-FilterPolicy-interface"><a href="#3-2-FilterPolicy-interface" class="headerlink" title="3.2 FilterPolicy interface"></a>3.2 <code>FilterPolicy</code> interface</h3><p><code>FilterPolicy</code> contains one virtual destructor and three pure virtual functions:</p>
<ul>
<li><code>virtual const char* Name() const = 0;</code></li>
<li><code>virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const = 0;</code></li>
<li><code>virtual bool KeyMayMatch(const Slice&amp; key, const Slice&amp; filter) const = 0;</code></li>
</ul>
<p><code>Name()</code> returns the name of pllicy. <code>CreateFilter</code> appends a filter that summarizes keys[0,n-1] to *dst. <code>KeyMayMatch</code> is used for determine whether key is in the keys passed by <code>CreateFilter</code>.</p>
<h3 id="3-3-BloomFilterPolicy-implementation"><a href="#3-3-BloomFilterPolicy-implementation" class="headerlink" title="3.3 BloomFilterPolicy implementation"></a>3.3 <code>BloomFilterPolicy</code> implementation</h3><p><code>CreateFilter</code> hashes $n$ <code>keys</code> into the a bit array which is appened to <code>dst</code>. The structure of <code>dst</code> is:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">|-----------------------| <span class="number">0</span></div><div class="line">| Initial dst           |</div><div class="line">|-----------------------| init_size</div><div class="line">| filter <span class="number">1</span>              |</div><div class="line">| filter <span class="number">2</span>              |</div><div class="line">| ...                   |</div><div class="line">| filter n              |</div><div class="line">|-----------------------| init_size + bytes</div><div class="line">| k_, <span class="meta"># of probes       | init_size + bytes + 1</span></div><div class="line">|-----------------------|</div></pre></td></tr></table></figure></p>
<p><code>bytes</code> is the size of filters. </p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">size_t</span> bits = n * bits_per_key_;</div><div class="line"><span class="keyword">if</span> (bits &lt; <span class="number">64</span>) bits = <span class="number">64</span>;</div><div class="line"><span class="keyword">size_t</span> bytes = (bits + <span class="number">7</span>) / <span class="number">8</span>;</div></pre></td></tr></table></figure>
<p>Blool filter uses double-hashing to generate a sequence of hash values:<br>$$\mathcal{H}(x)=H_1(x)+iH_2(x)$$<br>where $H_1(x)=BloomHash(x)$ and $H_2(x)=((H_1(x)&gt;&gt;17) | (H_1(x)&lt;&lt;15))$</p>
<p>The core of <code>CreateFilter</code> is:</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">    <span class="keyword">uint32_t</span> h = BloomHash(keys[i]);</div><div class="line">    <span class="keyword">const</span> <span class="keyword">uint32_t</span> delta = (h &gt;&gt; <span class="number">17</span>) | (h &lt;&lt; <span class="number">15</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; k_; j++) &#123;</div><div class="line">        <span class="keyword">const</span> <span class="keyword">uint32_t</span> bitpos = h % bits;</div><div class="line">        <span class="built_in">array</span>[bitpos/<span class="number">8</span>] |= (<span class="number">1</span> &lt;&lt; (bitpos % <span class="number">8</span>));</div><div class="line">        h += delta;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The outer loop iterates all the keys and the inter loop does <code>k_</code> times probes for each key and uses double-hashing explained before. </p>
<p>The <code>KeyMayMatch</code> does the opposite operation of <code>CreateFilter</code> and I ignore here.</p>
<hr>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Progress (======&gt;                                                     ?%):</span></div><div class="line"></div><div class="line">| - arena.&#123;h,cc&#125;         ------ Done</div><div class="line">| - bloom.cc             ------ Done</div><div class="line">| - cache.cc</div><div class="line">| - coding.&#123;h,cc&#125;</div><div class="line">| - comparator.h</div><div class="line">| - crc32c.&#123;h,cc&#125;</div><div class="line">| - env.cc</div><div class="line">| - env_posix.cc</div><div class="line">| - filter_policy.cc     ------ Done</div><div class="line">| - hash.&#123;h,cc&#125;          ------ Done</div><div class="line">| - histogram.&#123;h,cc&#125;</div><div class="line">| - logging.&#123;h,cc&#125;</div><div class="line">| - mutexlock.h</div><div class="line">| - options.cc</div><div class="line">| - posix_logger.h</div><div class="line">| - random.h</div><div class="line">| - status.cc</div><div class="line">| ...</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Util-structure&quot;&gt;&lt;a href=&quot;#1-Util-structure&quot; class=&quot;headerlink&quot; title=&quot;1. Util structure&quot;&gt;&lt;/a&gt;1. &lt;code&gt;Util&lt;/code&gt; structure&lt;/h2&gt;&lt;f
    
    </summary>
    
    
      <category term="LevelDB" scheme="https://crazyxy.github.io/tags/LevelDB/"/>
    
  </entry>
  
  <entry>
    <title>LevelDB II</title>
    <link href="https://crazyxy.github.io/2017/05/07/LevelDB-1/"/>
    <id>https://crazyxy.github.io/2017/05/07/LevelDB-1/</id>
    <published>2017-05-07T14:02:00.000Z</published>
    <updated>2017-05-07T14:29:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Util-structure"><a href="#1-Util-structure" class="headerlink" title="1. Util structure"></a>1. <code>Util</code> structure</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">| - arena.&#123;h,cc&#125;</div><div class="line">| - bloom.cc</div><div class="line">| - cache.cc</div><div class="line">| - coding.&#123;h,cc&#125;</div><div class="line">| - comparator.h</div><div class="line">| - crc32c.&#123;h,cc&#125;</div><div class="line">| - env.cc</div><div class="line">| - env_posix.cc</div><div class="line">| - filter_policy.cc</div><div class="line">| - hash.&#123;h,cc&#125;</div><div class="line">| - histogram.&#123;h,cc&#125;</div><div class="line">| - logging.&#123;h,cc&#125;</div><div class="line">| - mutexlock.h</div><div class="line">| - options.cc</div><div class="line">| - posix_logger.h</div><div class="line">| - random.h</div><div class="line">| - status.cc</div><div class="line">| ...</div></pre></td></tr></table></figure>
<p>Main files in <code>util</code> are listed. Each of following sections correspond to a entry in the structure. </p>
<h2 id="2-Arena"><a href="#2-Arena" class="headerlink" title="2. Arena"></a>2. <code>Arena</code></h2><p><code>Arena</code> appears in many open source project. It’s used for memory allocation and deallocation. The implementation for <code>Arena</code> is</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Arena</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Arena();</div><div class="line">    ~Arena();</div><div class="line">    <span class="function"><span class="keyword">char</span>* <span class="title">Allocate</span><span class="params">(<span class="keyword">size_t</span> bytes)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">char</span>* <span class="title">AllocateAligned</span><span class="params">(<span class="keyword">size_t</span> bytes)</span></span>;</div><div class="line">    </div><div class="line">    <span class="keyword">size_t</span> MemoryUsage() <span class="keyword">const</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">uintptr_t</span>&gt;(memory_usage_.NoBarrier_Load());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">char</span>* <span class="title">AllocateFallback</span><span class="params">(<span class="keyword">size_t</span> bytes)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">char</span>* <span class="title">AllocateNewBlock</span><span class="params">(<span class="keyword">size_t</span> block_types)</span></span>;</div><div class="line">    </div><div class="line">    <span class="keyword">char</span>* alloc_ptr;</div><div class="line">    <span class="keyword">size_t</span> alloc_bytes_remaining_;</div><div class="line"></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">char</span>*&gt; blocks_;</div><div class="line"></div><div class="line">    port::AtomicPointer memory_usage_;</div><div class="line"></div><div class="line">    Arena(<span class="keyword">const</span> Arena&amp;);</div><div class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>=(<span class="keyword">const</span> Arena&amp;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> <span class="keyword">char</span>* Arena::Allocate(<span class="keyword">size_t</span> bytes)&#123;</div><div class="line">    assert(bytes&gt;=<span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span> (bytes &lt;= alloc_bytes_remaining_)&#123;</div><div class="line">        <span class="keyword">char</span>* result = alloc_ptr_;</div><div class="line">        alloc_ptr_ += bytes;</div><div class="line">        alloc_bytes_remaining -= bytes;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> AllocateFallback(bytes);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Two functions (<code>Allocate</code> and <code>MemoryUsage</code>) are <code>inlined</code>. <code>MemoryUsage</code> returns the data member <code>memory_usage_</code>, which is shared by many threads. The implementation here is a thread unsafe way using <code>NoBarrier_Load</code>. I will discuss this part in the future <code>port</code> modules. Here, we discuss <code>Allocate</code> in detail. </p>
<p>If the remaining space is enough for request bytes, <code>Arena</code> only needs to update <code>alloc_ptr_</code> and <code>alloc_bytes_remaining</code>; otherwise it will call <code>AllocateFallback</code>.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> in kBlockSize = <span class="number">4096</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span>* Arena::AllocateFallback(<span class="keyword">size_t</span> bytes)&#123;</div><div class="line">    <span class="keyword">if</span> (bytes &gt; kBlockSize / <span class="number">4</span>)&#123;</div><div class="line">        <span class="keyword">char</span>* result = AllocateNewBlock(bytes);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;    </div><div class="line">    alloc_ptr_ = AllocateNewBlock(kBlockSize);</div><div class="line">    alloc_bytes_remaining_ = kBlockSize;</div><div class="line"></div><div class="line">    <span class="keyword">char</span>* result  = alloc_ptr_;</div><div class="line">    alloc_ptr_ += bytes;</div><div class="line">    alloc_bytes_remaining_ -= bytes;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">char</span>* Arena::AllocateNewBlock(<span class="keyword">size_t</span> block_bytes)&#123;</div><div class="line">    <span class="keyword">char</span>* result = <span class="keyword">new</span> <span class="keyword">char</span>[block_bytes];</div><div class="line">    blocks_.push_back(result);</div><div class="line">    memory_usage_.NoBarrier_Store(</div><div class="line">        <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>*&gt;(MemoryUsage() + block_bytes + <span class="keyword">sizeof</span>(<span class="keyword">char</span>*)));</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>AllocateFallback</code> calls <code>AllocateNewBlock</code> to allocate a new block and the size of the block depends of the request bytes. <code>AllocateNewBlock</code> allocates a block with provided block size and then updates the <code>memory_usage_</code>. The memory usage includes three parts: </p>
<ul>
<li>Previous memory usage (<code>MemoryUsage()</code>)</li>
<li>Block size (<code>block_bytes</code>)</li>
<li>Block pointer stored in <code>blocks_</code> (<code>sizeof(char*</code>))</li>
</ul>
<p>The last function is <code>AllocateAligned</code> which allocates aligned memory.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span>* Arena::AllocateAligned(<span class="keyword">size_t</span> bytes)&#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> align = (<span class="keyword">sizeof</span>(<span class="keyword">void</span>*) &gt; <span class="number">8</span>) ? <span class="keyword">sizeof</span>(<span class="keyword">void</span>*) : <span class="number">8</span>;</div><div class="line">    <span class="keyword">size_t</span> current_mod = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">uintptr_t</span>&gt;(alloc_ptr_) &amp; (align<span class="number">-1</span>);</div><div class="line">    <span class="keyword">size_t</span> slop = (current_mod == <span class="number">0</span> ? <span class="number">0</span> : align - current_mod);</div><div class="line">    <span class="keyword">size_t</span> needed = bytes + slop;</div><div class="line">    <span class="keyword">char</span>* result;</div><div class="line">    <span class="keyword">if</span> (needed &lt;= alloc_bytes_remaining_) &#123;</div><div class="line">        result = alloc_ptr_ + slop;</div><div class="line">        alloc_ptr_ += needed;</div><div class="line">        alloc_bytes_remaining_ -= needed;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        result = AllocateFallback(bytes);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>AllocateAligned</code> calculates <code>align</code> firstly and then adds <code>slop</code> to <code>bytes</code> as <code>needed</code> for alignment. Then following steps are the same as <code>Allocate</code>.</p>
<hr>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Progress (===&gt;                                                        ?%):</span></div><div class="line"></div><div class="line">| - arena.&#123;h,cc&#125;         ------ Done</div><div class="line">| - bloom.cc</div><div class="line">| - cache.cc</div><div class="line">| - coding.&#123;h,cc&#125;</div><div class="line">| - comparator.h</div><div class="line">| - crc32c.&#123;h,cc&#125;</div><div class="line">| - env.cc</div><div class="line">| - env_posix.cc</div><div class="line">| - filter_policy.cc</div><div class="line">| - hash.&#123;h,cc&#125;</div><div class="line">| - histogram.&#123;h,cc&#125;</div><div class="line">| - logging.&#123;h,cc&#125;</div><div class="line">| - mutexlock.h</div><div class="line">| - options.cc</div><div class="line">| - posix_logger.h</div><div class="line">| - random.h</div><div class="line">| - status.cc</div><div class="line">| ...</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Util-structure&quot;&gt;&lt;a href=&quot;#1-Util-structure&quot; class=&quot;headerlink&quot; title=&quot;1. Util structure&quot;&gt;&lt;/a&gt;1. &lt;code&gt;Util&lt;/code&gt; structure&lt;/h2&gt;&lt;f
    
    </summary>
    
    
      <category term="LevelDB" scheme="https://crazyxy.github.io/tags/LevelDB/"/>
    
  </entry>
  
  <entry>
    <title>LevelDB I</title>
    <link href="https://crazyxy.github.io/2017/05/07/leveldb-0/"/>
    <id>https://crazyxy.github.io/2017/05/07/leveldb-0/</id>
    <published>2017-05-06T16:00:00.000Z</published>
    <updated>2017-05-07T14:02:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-LevelDB"><a href="#1-LevelDB" class="headerlink" title="1. LevelDB"></a>1. LevelDB</h2><blockquote>
<p>LevelDB is a fast key-value storage library written at Google that provides an ordered mapping from string keys to string values.</p>
</blockquote>
<p>LevelDB provides many features, such as</p>
<blockquote>
<ul>
<li>Keys and values are arbitrary byte arrays. </li>
<li>Data is stored sorted by key.</li>
<li>Callers can provide a custom comparison function to override the sort order.<br>…</li>
</ul>
</blockquote>
<p>The following few blogs are trying to explain readers the code of LevelDB, which contains the design principals of k-v store.</p>
<h2 id="2-Level-Structure"><a href="#2-Level-Structure" class="headerlink" title="2. Level Structure"></a>2. Level Structure</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">| - db </div><div class="line">| - helps</div><div class="line">|     | - memenv</div><div class="line">| - include</div><div class="line">|     | - leveldb</div><div class="line">| - port</div><div class="line">| - table</div><div class="line">| - util</div><div class="line">| ...</div></pre></td></tr></table></figure>
<p>The structure lists the main components of LevelDB. <code>db</code> folder contains db implementations. <code>memenv</code> folder contains the environment related implementations. <code>include</code> is the folder of header files. <code>port</code> contains interfaces and implementations that isolate the rest of the package from platform details. <code>table</code> contains lower level implementations. <code>util</code> contains utilities for other classes. </p>
<p><code>util</code> is much easier than other modules and doesn’t need any knowledge of kv store, so we will learn <code>util</code> firstly.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-LevelDB&quot;&gt;&lt;a href=&quot;#1-LevelDB&quot; class=&quot;headerlink&quot; title=&quot;1. LevelDB&quot;&gt;&lt;/a&gt;1. LevelDB&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;LevelDB is a fast key-value
    
    </summary>
    
    
      <category term="LevelDB" scheme="https://crazyxy.github.io/tags/LevelDB/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 218 - The Skyline Problem</title>
    <link href="https://crazyxy.github.io/2016/10/19/LeetCode-218-The-Skyline-Problem/"/>
    <id>https://crazyxy.github.io/2016/10/19/LeetCode-218-The-Skyline-Problem/</id>
    <published>2016-10-19T08:32:13.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Segment tree update and query.</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> L(u) u&lt;&lt;1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> R(u) u&lt;&lt;1|1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(l,r) (l+r)&gt;&gt;1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 20010</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> l, r, h;</div><div class="line">    <span class="keyword">bool</span> lazy;</div><div class="line">&#125; nodes[MAXN&lt;&lt;<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegTree</span>&#123;</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">        nodes[u].l = left;</div><div class="line">        nodes[u].r = right;</div><div class="line">        nodes[u].h = <span class="number">0</span>;</div><div class="line">        nodes[u].lazy = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span>(left + <span class="number">1</span> == right) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">int</span> mid = MID(left, right);</div><div class="line">        build(left, mid, L(u));</div><div class="line">        build(mid, right, R(u));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (!nodes[u].lazy) <span class="keyword">return</span>;</div><div class="line">		nodes[L(u)].h = max(nodes[L(u)].h, nodes[u].h);</div><div class="line">		nodes[R(u)].h = max(nodes[R(u)].h, nodes[u].h);</div><div class="line">		nodes[L(u)].lazy = nodes[R(u)].lazy = <span class="literal">true</span>;</div><div class="line">		nodes[u].h = <span class="number">-1</span>;</div><div class="line">		nodes[u].lazy = <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(nodes[L(u)].h == nodes[R(u)].h) nodes[u].h = nodes[L(u)].h;</div><div class="line">        <span class="keyword">else</span> nodes[u].h = <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> u, <span class="keyword">int</span> height)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(nodes[u].l == left &amp;&amp; nodes[u].r == right &amp;&amp; nodes[u].h &gt;= <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(nodes[u].h == <span class="number">0</span>)&#123;</div><div class="line">                nodes[u].h = height;</div><div class="line">                nodes[u].lazy = <span class="literal">true</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nodes[u].h &lt; height)&#123;</div><div class="line">                nodes[u].h = height;</div><div class="line">                nodes[u].lazy = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        pushdown(u);</div><div class="line">        <span class="keyword">int</span> mid = MID(nodes[u].l, nodes[u].r);</div><div class="line">        <span class="keyword">if</span>(right &lt;= mid)&#123;</div><div class="line">            update(left, right, L(u), height);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(left &gt;= mid)&#123;</div><div class="line">            update(left, right, R(u), height);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            update(left, mid, L(u), height);</div><div class="line">            update(mid, right, R(u), height);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        pushup(u);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> &amp;right, <span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (nodes[u].l == left &amp;&amp; nodes[u].h &gt;= <span class="number">0</span>) &#123;</div><div class="line">			right = nodes[u].r;</div><div class="line">			<span class="keyword">return</span> nodes[u].h;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">int</span> mid = MID(nodes[u].l, nodes[u].r);</div><div class="line">		<span class="keyword">if</span> (left &gt;= mid) &#123;</div><div class="line">			<span class="keyword">return</span> query(left, right, R(u));</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> query(left, right, L(u));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    </div><div class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; getSkyline(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; bs) &#123;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> b : bs)&#123;</div><div class="line">            s.insert(b[<span class="number">0</span>]);</div><div class="line">            s.insert(b[<span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; aux(s.begin(), s.end());</div><div class="line">        <span class="keyword">int</span> n = aux.size();</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> &#123;&#125;;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) m[aux[i]] = i+<span class="number">1</span>;</div><div class="line">        </div><div class="line">        SegTree tree;</div><div class="line">        tree.build(<span class="number">1</span>, n+<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> b : bs) tree.update(m[b[<span class="number">0</span>]], m[b[<span class="number">1</span>]], <span class="number">1</span>, b[<span class="number">2</span>]);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> left = <span class="number">1</span>, right = <span class="number">-1</span>, pre = <span class="number">-1</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; res;</div><div class="line">        <span class="keyword">while</span>(right &lt; n)&#123;</div><div class="line">            <span class="keyword">int</span> height = tree.query(left, right, <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span>(res.empty() || height != res.back().second) res.push_back(&#123;aux[left<span class="number">-1</span>], height&#125;);</div><div class="line">            </div><div class="line">            left = right;</div><div class="line">        &#125;</div><div class="line">        res.push_back(&#123;aux[right<span class="number">-1</span>], <span class="number">0</span>&#125;);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;p&gt;Segment tree update and query.&lt;/p&gt;
&lt;h2 id=&quot;Cod
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 38 - Count and Say</title>
    <link href="https://crazyxy.github.io/2016/10/19/LeetCode-38-Count-and-Say/"/>
    <id>https://crazyxy.github.io/2016/10/19/LeetCode-38-Count-and-Say/</id>
    <published>2016-10-19T05:32:09.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote>
<p>Just do it.</p>
</blockquote>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="built_in">string</span> res = <span class="string">"1"</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)&#123;</div><div class="line">            <span class="keyword">int</span> len = res.length();</div><div class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">            <span class="built_in">string</span> tmp;</div><div class="line">            <span class="keyword">while</span>(j &lt; len)&#123;</div><div class="line">                <span class="keyword">int</span> k = j;</div><div class="line">                <span class="keyword">while</span>(k &lt; len &amp;&amp; res[k] == res[j]) k ++;</div><div class="line">                tmp += to_string(k - j) + res[j];</div><div class="line">                j = k;</div><div class="line">            &#125;</div><div class="line">            res = tmp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Just do it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 56 - Merge Intervals</title>
    <link href="https://crazyxy.github.io/2016/10/19/LeetCode-56-Merge-Intervals/"/>
    <id>https://crazyxy.github.io/2016/10/19/LeetCode-56-Merge-Intervals/</id>
    <published>2016-10-19T05:10:30.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote>
<p>Just do it.</p>
</blockquote>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for an interval.</div><div class="line"> * struct Interval &#123;</div><div class="line"> *     int start;</div><div class="line"> *     int end;</div><div class="line"> *     Interval() : start(0), end(0) &#123;&#125;</div><div class="line"> *     Interval(int s, int e) : start(s), end(e) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;Interval&gt; merge(<span class="built_in">vector</span>&lt;Interval&gt;&amp; arr) &#123;</div><div class="line">        <span class="keyword">int</span> n = arr.size();</div><div class="line">        <span class="keyword">if</span>(!n) <span class="keyword">return</span> &#123;&#125;;</div><div class="line">        </div><div class="line">        sort(arr.begin(), arr.end(), [](<span class="keyword">const</span> Interval&amp; lhs, <span class="keyword">const</span> Interval&amp; rhs)&#123;</div><div class="line">            <span class="keyword">if</span>(lhs.start == rhs.start) <span class="keyword">return</span> lhs.end &lt; rhs.end;</div><div class="line">            <span class="keyword">return</span> lhs.start &lt; rhs.start;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> left = arr[<span class="number">0</span>].start, right = arr[<span class="number">0</span>].end;</div><div class="line">        <span class="built_in">vector</span>&lt;Interval&gt; res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)&#123;</div><div class="line">            <span class="keyword">if</span>(arr[i].start &lt;= right) right = max(right, arr[i].end);</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                res.push_back(&#123;left, right&#125;);</div><div class="line">                left = arr[i].start;</div><div class="line">                right = arr[i].end;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        res.push_back(&#123;left, right&#125;);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Just do it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 165 - Compare Version Numbers</title>
    <link href="https://crazyxy.github.io/2016/10/19/LeetCode-165-Compare-Version-Numbers/"/>
    <id>https://crazyxy.github.io/2016/10/19/LeetCode-165-Compare-Version-Numbers/</id>
    <published>2016-10-19T04:49:37.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote>
<p>Just do it.</p>
</blockquote>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compareVersion</span><span class="params">(<span class="built_in">string</span> version1, <span class="built_in">string</span> version2)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> m = version1.length(), n = version2.length(), i = <span class="number">0</span>, j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i &lt; m &amp;&amp; j &lt; n)&#123;</div><div class="line">            <span class="keyword">int</span> ii = i, jj = j;</div><div class="line">            <span class="keyword">while</span>(ii &lt; m &amp;&amp; version1[ii] != <span class="string">'.'</span>) ii ++;</div><div class="line">            <span class="keyword">while</span>(jj &lt; n &amp;&amp; version2[jj] != <span class="string">'.'</span>) jj ++;</div><div class="line">            <span class="built_in">string</span> lhs = version1.substr(i, ii - i);</div><div class="line">            <span class="built_in">string</span> rhs = version2.substr(j, jj - j);</div><div class="line">            <span class="keyword">if</span>(stoi(lhs) &gt; stoi(rhs)) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(stoi(lhs) &lt; stoi(rhs)) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">            i = ii + <span class="number">1</span>;</div><div class="line">            j = jj + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(i &gt;= m &amp;&amp; j &gt;= n) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i &gt; m)&#123;</div><div class="line">            <span class="keyword">while</span>(j &lt; n &amp;&amp; (version2[j] == <span class="string">'.'</span> || version2[j] == <span class="string">'0'</span>)) j ++;</div><div class="line">            <span class="keyword">if</span>(j == n) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">while</span>(i &lt; m &amp;&amp; (version1[i] == <span class="string">'.'</span> || version1[i] == <span class="string">'0'</span>)) i ++;</div><div class="line">            <span class="keyword">if</span>(i == m) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Just do it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 258 - Add Digits</title>
    <link href="https://crazyxy.github.io/2016/10/19/LeetCode-258-Add-Digits/"/>
    <id>https://crazyxy.github.io/2016/10/19/LeetCode-258-Add-Digits/</id>
    <published>2016-10-19T03:32:16.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote>
<p>Just do it.</p>
</blockquote>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addDigits</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> num % <span class="number">9</span> || !num ? num % <span class="number">9</span> : <span class="number">9</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Just do it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 121 - Best Time to Buy and Sell Stock</title>
    <link href="https://crazyxy.github.io/2016/10/19/LeetCode-121-Best-Time-to-Buy-and-Sell-Stock/"/>
    <id>https://crazyxy.github.io/2016/10/19/LeetCode-121-Best-Time-to-Buy-and-Sell-Stock/</id>
    <published>2016-10-19T03:27:18.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Record the maximum price <code>max_i</code> after the <code>i</code>th day and the maximum profit is the maximum value among all <code>p_i-max_i</code>. </p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = prices.size(), res = <span class="number">0</span>, maxprice = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --)&#123;</div><div class="line">            maxprice = max(maxprice, prices[i]);</div><div class="line">            res = max(maxprice - prices[i], res);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;p&gt;Record the maximum price &lt;code&gt;max_i&lt;/code&gt; af
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 168 - Excel Sheet Column Title</title>
    <link href="https://crazyxy.github.io/2016/10/19/LeetCode-168-Excel-Sheet-Column-Title/"/>
    <id>https://crazyxy.github.io/2016/10/19/LeetCode-168-Excel-Sheet-Column-Title/</id>
    <published>2016-10-19T03:23:35.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote>
<p>Just do it.</p>
</blockquote>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">convertToTitle</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="built_in">string</span> res;</div><div class="line">        <span class="keyword">while</span>(n)&#123;</div><div class="line">            n --;</div><div class="line">            <span class="keyword">int</span> x = n % <span class="number">26</span>;</div><div class="line">            n /= <span class="number">26</span>;</div><div class="line">            </div><div class="line">            res = <span class="keyword">char</span>(<span class="string">'A'</span>+x) + res;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Just do it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 28 - Implement strStr()</title>
    <link href="https://crazyxy.github.io/2016/10/19/LeetCode-28-Implement-strStr/"/>
    <id>https://crazyxy.github.io/2016/10/19/LeetCode-28-Implement-strStr/</id>
    <published>2016-10-19T03:03:58.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>KMP algorithm.</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; getNext(<span class="built_in">string</span> pat)&#123;</div><div class="line">        <span class="keyword">int</span> n = pat.length();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; next(n, <span class="number">0</span>);</div><div class="line">        next[<span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line">        next[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i ++)&#123;</div><div class="line">            <span class="keyword">int</span> j = next[i - <span class="number">1</span>];</div><div class="line">            <span class="keyword">while</span>(j != <span class="number">-1</span> &amp;&amp; pat[j] != pat[i<span class="number">-1</span>]) j = next[j];</div><div class="line">            next[i] = j + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> next;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(<span class="built_in">string</span> haystack, <span class="built_in">string</span> needle)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> m = haystack.length(), n = needle.length(), i = <span class="number">0</span>, j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; next = getNext(needle);</div><div class="line">        <span class="keyword">while</span>(i &lt; m &amp;&amp; j &lt; n)&#123;</div><div class="line">            <span class="keyword">if</span>(haystack[i] == needle[j])&#123;</div><div class="line">                i ++;</div><div class="line">                j ++;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                j = next[j];</div><div class="line">                <span class="keyword">if</span>(j == <span class="number">-1</span>)&#123;</div><div class="line">                    i ++;</div><div class="line">                    j ++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(j != n) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> i - n;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;p&gt;KMP algorithm.&lt;/p&gt;
&lt;h2 id=&quot;Code&quot;&gt;&lt;a href=&quot;#Cod
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 215 - Kth Largest Element in an Array</title>
    <link href="https://crazyxy.github.io/2016/10/19/LeetCode-215-Kth-Largest-Element-in-an-Array/"/>
    <id>https://crazyxy.github.io/2016/10/19/LeetCode-215-Kth-Largest-Element-in-an-Array/</id>
    <published>2016-10-19T02:47:34.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Using priority queue. </p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt;&gt; pq;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x : nums)&#123;</div><div class="line">            <span class="keyword">if</span>(pq.size() &lt; k) pq.push(x);</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span>(x &gt; pq.top())&#123;</div><div class="line">                    pq.pop();</div><div class="line">                    pq.push(x);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> pq.top();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;p&gt;Using priority queue. &lt;/p&gt;
&lt;h2 id=&quot;Code&quot;&gt;&lt;a hr
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 413 - Arithmetic Slices</title>
    <link href="https://crazyxy.github.io/2016/10/18/LeetCode-413-Arithmetic-Slices/"/>
    <id>https://crazyxy.github.io/2016/10/18/LeetCode-413-Arithmetic-Slices/</id>
    <published>2016-10-18T08:36:29.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>The answer of arithmetic sequence with length <code>n</code> is <code>(n-1)*(n-2)/2</code>.</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfArithmeticSlices</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = A.size(), i = <span class="number">0</span>, res = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i &lt; n)&#123;</div><div class="line">            <span class="keyword">int</span> j = i + <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(j == n) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">int</span> diff = A[j] - A[i];</div><div class="line">            <span class="keyword">while</span>(j &lt; n &amp;&amp; diff == A[j] - A[j<span class="number">-1</span>]) j ++;</div><div class="line">            </div><div class="line">            <span class="keyword">int</span> x = j - i;</div><div class="line">            res += (x<span class="number">-1</span>) * (x<span class="number">-2</span>) / <span class="number">2</span>;</div><div class="line">            </div><div class="line">            i = j - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;p&gt;The answer of arithmetic sequence with length 
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 416 - Partition Equal Subset Sum</title>
    <link href="https://crazyxy.github.io/2016/10/18/LeetCode-416-Partition-Equal-Subset-Sum/"/>
    <id>https://crazyxy.github.io/2016/10/18/LeetCode-416-Partition-Equal-Subset-Sum/</id>
    <published>2016-10-18T08:17:39.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Dynamic programming.</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canPartition</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = nums.size(), sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x : nums) sum += x;</div><div class="line">        <span class="keyword">if</span>(sum % <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        sum /= <span class="number">2</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; dp(sum+<span class="number">1</span>, <span class="literal">false</span>);</div><div class="line">        dp[<span class="number">0</span>] = <span class="literal">true</span>;</div><div class="line">        sort(nums.begin(), nums.end());</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = sum; j &gt;= nums[i]; j --)&#123;</div><div class="line">                dp[j] = dp[j] || dp[j-nums[i]];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[sum];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;p&gt;Dynamic programming.&lt;/p&gt;
&lt;h2 id=&quot;Code&quot;&gt;&lt;a href
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 410 - Split Array Largest Sum</title>
    <link href="https://crazyxy.github.io/2016/10/18/LeetCode-410-Split-Array-Largest-Sum/"/>
    <id>https://crazyxy.github.io/2016/10/18/LeetCode-410-Split-Array-Largest-Sum/</id>
    <published>2016-10-18T08:03:53.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Binary search. For each sum, find the minimum groups that the array can be divided. If the number of groups is less than <code>m</code>, the sum is valid; otherwise the sum is invalid.</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> m, <span class="keyword">long</span> <span class="keyword">long</span> t)</span></span>&#123;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>, cnt = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x : nums)&#123;</div><div class="line">            <span class="keyword">if</span>(x &gt; t) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(sum + x &lt;= t) sum += x;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                cnt++;</div><div class="line">                sum = x;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        cnt ++;</div><div class="line">        <span class="keyword">return</span> cnt &lt;= m;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">splitArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = nums.size();</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>, maxnum = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x : nums)&#123;</div><div class="line">            maxnum = max&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;(maxnum, x);</div><div class="line">            sum += x;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> left = <span class="number">0</span>, right = sum, res = right;</div><div class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</div><div class="line">            </div><div class="line">            <span class="keyword">long</span> <span class="keyword">long</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(check(nums, m, mid))&#123;</div><div class="line">                res = min(res, mid);</div><div class="line">                right = mid - <span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span> left = mid + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;p&gt;Binary search. For each sum, find the minimum 
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 419 - Battleships in a Board</title>
    <link href="https://crazyxy.github.io/2016/10/18/LeetCode-419-Battleships-in-a-Board/"/>
    <id>https://crazyxy.github.io/2016/10/18/LeetCode-419-Battleships-in-a-Board/</id>
    <published>2016-10-18T05:57:57.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>DFS or Union Set.</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">int</span> m, n;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; vis;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt; g;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">        vis[r][c] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++)&#123;</div><div class="line">            <span class="keyword">int</span> rr = r + dir[i][<span class="number">0</span>];</div><div class="line">            <span class="keyword">int</span> cc = c + dir[i][<span class="number">1</span>];</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(rr &gt;= <span class="number">0</span> &amp;&amp; rr &lt; m &amp;&amp; cc &gt;= <span class="number">0</span> &amp;&amp; cc &lt; n &amp;&amp; !vis[rr][cc] &amp;&amp; g[rr][cc] == <span class="string">'X'</span>)&#123;</div><div class="line">                dfs(rr, cc);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countBattleships</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</div><div class="line">        m = board.size();</div><div class="line">        <span class="keyword">if</span>(!m) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        n = board[<span class="number">0</span>].size();</div><div class="line">        g = board;</div><div class="line">        vis.assign(m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n, <span class="number">0</span>));</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++)&#123;</div><div class="line">                <span class="keyword">if</span>(board[i][j] == <span class="string">'X'</span> &amp;&amp; !vis[i][j])&#123;</div><div class="line">                    res ++;</div><div class="line">                    dfs(i, j);</div><div class="line">                &#125; </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;p&gt;DFS or Union Set.&lt;/p&gt;
&lt;h2 id=&quot;Code&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 423 - Reconstruct Original Digits from English</title>
    <link href="https://crazyxy.github.io/2016/10/18/LeetCode-423-Reconstruct-Original-Digits-from-English/"/>
    <id>https://crazyxy.github.io/2016/10/18/LeetCode-423-Reconstruct-Original-Digits-from-English/</id>
    <published>2016-10-18T05:27:22.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Extract feature character of each string. For example, <code>z</code> for <code>one</code>.</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">originalDigits</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="built_in">string</span> str[] = &#123;<span class="string">"zero"</span>, <span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>, <span class="string">"five"</span>, <span class="string">"six"</span>, <span class="string">"seven"</span>, <span class="string">"eight"</span>, <span class="string">"nine"</span>&#125;;</div><div class="line">        <span class="keyword">int</span> cnt[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;, x[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> ch : s) cnt[ch-<span class="string">'a'</span>] ++;</div><div class="line">        </div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">char</span>&gt;&gt; vec &#123;&#123;<span class="number">0</span>, <span class="string">'z'</span>&#125;, &#123;<span class="number">2</span>, <span class="string">'w'</span>&#125;, &#123;<span class="number">4</span>, <span class="string">'u'</span>&#125;, &#123;<span class="number">6</span>, <span class="string">'x'</span>&#125;, &#123;<span class="number">8</span>, <span class="string">'g'</span>&#125;, &#123;<span class="number">1</span>, <span class="string">'o'</span>&#125;, &#123;<span class="number">3</span>, <span class="string">'r'</span>&#125;, &#123;<span class="number">5</span>, <span class="string">'f'</span>&#125;, &#123;<span class="number">7</span>, <span class="string">'v'</span>&#125;, &#123;<span class="number">9</span>, <span class="string">'i'</span>&#125;&#125;;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> p : vec)&#123;</div><div class="line">            x[p.first] += cnt[p.second-<span class="string">'a'</span>];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> ch : str[p.first]) cnt[ch-<span class="string">'a'</span>] -= x[p.first];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">string</span> res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</div><div class="line">            res += <span class="built_in">string</span>(x[i], <span class="string">'0'</span>+i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;p&gt;Extract feature character of each string. For 
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 424 - Longest Repeating Character Replacement</title>
    <link href="https://crazyxy.github.io/2016/10/18/LeetCode-424-Longest-Repeating-Character-Replacement/"/>
    <id>https://crazyxy.github.io/2016/10/18/LeetCode-424-Longest-Repeating-Character-Replacement/</id>
    <published>2016-10-18T03:08:25.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Two pointers. For each slide window with length <code>n</code>, if <code>n-maxcnt &lt;= k</code>, the string in the window can be transformed into wanted string. In this case, we move the right pointer to probe larger window size; otherwise, we reduce the window size by moving the left pointer.</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">characterReplacement</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = s.length(), cnt[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;, i = <span class="number">0</span>, j = <span class="number">0</span>, res = <span class="number">0</span>;</div><div class="line">        <span class="keyword">bool</span> move = <span class="literal">true</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(i &lt; n)&#123;</div><div class="line">            <span class="keyword">if</span>(move) cnt[s[i]-<span class="string">'A'</span>] ++;    </div><div class="line">            move = <span class="literal">false</span>;</div><div class="line">            </div><div class="line">            <span class="keyword">int</span> maxcnt = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">26</span>; x ++) maxcnt = max(maxcnt, cnt[x]);</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(maxcnt &gt;= i - j + <span class="number">1</span> - k)&#123;</div><div class="line">                res = max(res, i - j + <span class="number">1</span>);</div><div class="line">                i ++;</div><div class="line">                move = <span class="literal">true</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                cnt[s[j++]-<span class="string">'A'</span>]--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;p&gt;Two pointers. For each slide window with lengt
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 421 - Maximum XOR of Two Numbers in an Array</title>
    <link href="https://crazyxy.github.io/2016/10/17/LeetCode-421-Maximum-XOR-of-Two-Numbers-in-an-Array/"/>
    <id>https://crazyxy.github.io/2016/10/17/LeetCode-421-Maximum-XOR-of-Two-Numbers-in-an-Array/</id>
    <published>2016-10-17T14:01:11.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Trie. Build trie for the numbers in the array. For each number <code>x</code> in the array, find the number <code>y</code> which make <code>x ^ y</code> maximum. The time complexity is <code>O(n log L)</code> where <code>L</code> is the maximum number.</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; toBits(<span class="keyword">int</span> val)&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bits(<span class="number">32</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> id = <span class="number">31</span>;</div><div class="line">    <span class="keyword">while</span>(val)&#123;</div><div class="line">        bits[id--] = val &amp; <span class="number">1</span>;</div><div class="line">        val &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> bits;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TrieNode</span>&#123;</span></div><div class="line">    TrieNode()&#123;</div><div class="line">        next[<span class="number">0</span>] = next[<span class="number">1</span>] = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    TrieNode *next[<span class="number">2</span>];</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span>&#123;</span></div><div class="line">    TrieNode *root;</div><div class="line">    Trie()&#123;root = <span class="keyword">new</span> TrieNode();&#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bits = toBits(val);</div><div class="line">        <span class="keyword">auto</span> u = root;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i ++)&#123;</div><div class="line">            <span class="keyword">if</span>(!u-&gt;next[bits[i]]) u-&gt;next[bits[i]] = <span class="keyword">new</span> TrieNode();</div><div class="line">            u = u-&gt;next[bits[i]];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMaximumXOR</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = nums.size(), res = <span class="number">0</span>;</div><div class="line">        Trie tree;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> num : nums) tree.insert(num);</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)&#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bits = toBits(nums[i]);</div><div class="line">            </div><div class="line">            <span class="keyword">auto</span> a = tree.root, b = a;</div><div class="line">            <span class="keyword">int</span> x = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j ++)&#123;</div><div class="line">                a = a-&gt;next[bits[j]];</div><div class="line">                <span class="keyword">if</span>(b-&gt;next[(bits[j]+<span class="number">1</span>)%<span class="number">2</span>])&#123;</div><div class="line">                    b = b-&gt;next[(bits[j]+<span class="number">1</span>)%<span class="number">2</span>];</div><div class="line">                    x = x * <span class="number">2</span> + ((bits[j]+<span class="number">1</span>)%<span class="number">2</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    b = b-&gt;next[bits[j]];</div><div class="line">                    x = x * <span class="number">2</span> + bits[j];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            res = max(x ^ nums[i], res);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;p&gt;Trie. Build trie for the numbers in the array.
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
</feed>

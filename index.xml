<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yan</title>
    <link>https://crazyxy.github.io/</link>
    <description>Recent content on Yan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/crazyxy&#34;&gt;Yan Xue&lt;/a&gt; 2017</copyright>
    <lastBuildDate>Wed, 19 Jul 2017 15:34:45 +0800</lastBuildDate>
    
	<atom:link href="https://crazyxy.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Haskell中Monad是如何解决side effect的？</title>
      <link>https://crazyxy.github.io/post/side-effect/</link>
      <pubDate>Wed, 19 Jul 2017 15:34:45 +0800</pubDate>
      
      <guid>https://crazyxy.github.io/post/side-effect/</guid>
      <description>翻译自 Why are side-effects modeled as monads in Haskell?
 假设一个函数有side effects。如果将函数导致的side effect包在函数的输入和输出中，则函数又变成了pure的。
所以对于一个impure的函数f&#39;
f&#39; :: Int -&amp;gt; Int  通过添加RealWorld来将impure函数变成pure的函数。
f :: Int -&amp;gt; RealWorld -&amp;gt; (Int, RealWorld) -- 将RealWorld作为一个参数，并且将修改之后的RealWorld返回  这样的话，f现在就是一个pure的函数。为了方便，记IO a = RealWorld -&amp;gt; (a, RealWorld)，f的类型就可以简写为
f :: Int -&amp;gt; IO Int  IO是对RealWorld的一种封装，避免了程序员直接操作RealWorld对象。对于程序员来说，直接操作RealWorld对象是很危险的一件事。例如，如果我们获取了一个RealWorld类型的值，我们可能拷贝这个值。从逻辑上讲，这种行为是不可能的。
getLine :: IO String = RealWorld -&amp;gt; (String, RealWorld) getContents:: String -&amp;gt; IO String = String -&amp;gt; RealWorld -&amp;gt; (String, RealWorld) putStrLn :: String -&amp;gt; IO () = String -&amp;gt; RealWorld -&amp;gt; ((), RealWorld)  假设现在我们想从console读一个文件名，然后读取文件，最后将文件内容输出。我们应该如何通过上述的pure函数实现呢？</description>
    </item>
    
    <item>
      <title>Applicative Functors Deduction</title>
      <link>https://crazyxy.github.io/post/applicative-functors-deduction/</link>
      <pubDate>Tue, 18 Jul 2017 14:52:52 +0800</pubDate>
      
      <guid>https://crazyxy.github.io/post/applicative-functors-deduction/</guid>
      <description>背景简介 在Haskell中，Functor和Applicative Functor的定义如下：
class Functor f where fmap :: (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b class (Functor f) =&amp;gt; Applicative f where pure :: a -&amp;gt; f a &amp;lt;*&amp;gt; :: f (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b  从上面的定义中可以看出，Functor和Applicative的instance都是type constructor，因为它需要吃一个类型a。许多type constructor都是Functor和Applicative的instance。例如Maybe，[]和(-&amp;gt;)r。
在上面三个类型中(-&amp;gt;)r最为怪异。它是一个function，并且一个吃了一个类型，只需要另外一个类型便可以construct一个新的类型。(-&amp;gt;)r的fmap，pure和&amp;lt;*&amp;gt;的实现如下：
instance Functor ((-&amp;gt;)r) where fmap f g = \r -&amp;gt; f (g r)  (-&amp;gt;)r的fmap函数实际上相当于.，因为fmap的类型为：
fmap :: (a -&amp;gt; b) -&amp;gt; (r -&amp;gt; a) -&amp;gt; (r -&amp;gt; b)  因此对于(-&amp;gt;)rFunctor，fmap = .</description>
    </item>
    
    <item>
      <title>Interesting Problems from Coursera</title>
      <link>https://crazyxy.github.io/post/interesting-problems-from-coursera/</link>
      <pubDate>Sun, 16 Jul 2017 20:57:45 +0800</pubDate>
      
      <guid>https://crazyxy.github.io/post/interesting-problems-from-coursera/</guid>
      <description>最近一直在Coursera上学习Princeton University的Algorithms。在学习过程中遇到了很多有趣的问题，在这里记录下来并分享给大家。
3-SUM $O(n^2)$ 时间复杂度的算法 3-SUM 问题如下，给定一个数组a[N]和x，问数组中存在几组(i,j,k), i&amp;lt;j&amp;lt;k使得a[i]+a[j]+a[k]=x。这道题早在Leetcode上就遇到了，具体的方法如下：
（为简单起见，假设所有元素均不相同）
// Step 1: 将数组按照升序排序 // Step 2: 最外层循环一次从0遍历到N // Step 3: 内层循环使用两个指针，分别指向i+1和N-1，问题变成了在一个数组中寻找一对数使它们的和为x-a[i]。 for(int i = 0; i &amp;lt; N; i ++){ int j = i + 1, k = N - 1; while(j &amp;lt; k){ int s = a[j]+a[k]+a[i]; if(s==x){ // find a new tuple break; }else if(s &amp;lt; x){ j ++; }else{ k --; } } }  在双调数组（bitonic array）中找一个元素，要求时间复杂度$O(log n)$ $\Theta(3 log n)$算法  先找出双调数组中的最大值 ===&amp;gt; $log n$次比较  int find_max(int* arr, int left, int right){ while(left + 1 &amp;lt; right){ int mid = (left + right) / 2; if(arr[mid] &amp;gt; arr[mid+1]){ right = mid; }else{ left = mid; } } return (arr[left] &amp;gt; arr[right] ?</description>
    </item>
    
    <item>
      <title>Delete And Successor</title>
      <link>https://crazyxy.github.io/post/delete-and-successor/</link>
      <pubDate>Fri, 14 Jul 2017 17:30:59 +0800</pubDate>
      
      <guid>https://crazyxy.github.io/post/delete-and-successor/</guid>
      <description>Problem Given a sequence a number $S=\{1&amp;hellip;n\}$ and a sequence of operations which contain two types of operation: delete and query. delte(x) delete $x$ from the sequence and query(x) return the successor of the $x$ in the sequence.
Solution Union-Find. When delete(x), union the subtree where $x$ is in and the subtree $x+1$ is in. The operation can be viewed as a fold operation which fold $x$ and $x+1$. When query(x), return the find(x+1).</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Crazyxy is Coding</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://crazyxy.github.io/"/>
  <updated>2017-05-06T13:51:11.000Z</updated>
  <id>https://crazyxy.github.io/</id>
  
  <author>
    <name>Yan Xue</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 223 - Rectangle Area</title>
    <link href="https://crazyxy.github.io/2016/10/20/LeetCode-223-Rectangle-Area/"/>
    <id>https://crazyxy.github.io/2016/10/20/LeetCode-223-Rectangle-Area/</id>
    <published>2016-10-20T09:45:42.000Z</published>
    <updated>2017-05-06T13:51:11.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 116 - Populating Next Right Pointers in Each Node</title>
    <link href="https://crazyxy.github.io/2016/10/20/LeetCode-116-Populating-Next-Right-Pointers-in-Each-Node/"/>
    <id>https://crazyxy.github.io/2016/10/20/LeetCode-116-Populating-Next-Right-Pointers-in-Each-Node/</id>
    <published>2016-10-20T06:11:03.000Z</published>
    <updated>2017-05-06T13:51:11.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 88 - Merge Sorted Array</title>
    <link href="https://crazyxy.github.io/2016/10/20/LeetCode-88-Merge-Sorted-Array/"/>
    <id>https://crazyxy.github.io/2016/10/20/LeetCode-88-Merge-Sorted-Array/</id>
    <published>2016-10-20T05:59:59.000Z</published>
    <updated>2017-05-06T13:51:11.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 9 - Palindrome Number</title>
    <link href="https://crazyxy.github.io/2016/10/20/LeetCode-9-Palindrome-Number/"/>
    <id>https://crazyxy.github.io/2016/10/20/LeetCode-9-Palindrome-Number/</id>
    <published>2016-10-20T05:49:03.000Z</published>
    <updated>2017-05-06T13:51:11.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 236 - Lowest Common Ancestor of a Binary Tree</title>
    <link href="https://crazyxy.github.io/2016/10/20/LeetCode-236-Lowest-Common-Ancestor-of-a-Binary-Tree/"/>
    <id>https://crazyxy.github.io/2016/10/20/LeetCode-236-Lowest-Common-Ancestor-of-a-Binary-Tree/</id>
    <published>2016-10-20T04:00:36.000Z</published>
    <updated>2017-05-06T13:51:11.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title> LeetCode 235 - Lowest Common Ancestor of a Binary Search Tree</title>
    <link href="https://crazyxy.github.io/2016/10/20/LeetCode-235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree/"/>
    <id>https://crazyxy.github.io/2016/10/20/LeetCode-235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree/</id>
    <published>2016-10-20T03:56:17.000Z</published>
    <updated>2017-05-06T13:51:11.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 218 - The Skyline Problem</title>
    <link href="https://crazyxy.github.io/2016/10/19/LeetCode-218-The-Skyline-Problem/"/>
    <id>https://crazyxy.github.io/2016/10/19/LeetCode-218-The-Skyline-Problem/</id>
    <published>2016-10-19T08:32:13.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Segment tree update and query.</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> L(u) u&lt;&lt;1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> R(u) u&lt;&lt;1|1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(l,r) (l+r)&gt;&gt;1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 20010</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> l, r, h;</div><div class="line">    <span class="keyword">bool</span> lazy;</div><div class="line">&#125; nodes[MAXN&lt;&lt;<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegTree</span>&#123;</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">        nodes[u].l = left;</div><div class="line">        nodes[u].r = right;</div><div class="line">        nodes[u].h = <span class="number">0</span>;</div><div class="line">        nodes[u].lazy = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span>(left + <span class="number">1</span> == right) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">int</span> mid = MID(left, right);</div><div class="line">        build(left, mid, L(u));</div><div class="line">        build(mid, right, R(u));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (!nodes[u].lazy) <span class="keyword">return</span>;</div><div class="line">		nodes[L(u)].h = max(nodes[L(u)].h, nodes[u].h);</div><div class="line">		nodes[R(u)].h = max(nodes[R(u)].h, nodes[u].h);</div><div class="line">		nodes[L(u)].lazy = nodes[R(u)].lazy = <span class="literal">true</span>;</div><div class="line">		nodes[u].h = <span class="number">-1</span>;</div><div class="line">		nodes[u].lazy = <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(nodes[L(u)].h == nodes[R(u)].h) nodes[u].h = nodes[L(u)].h;</div><div class="line">        <span class="keyword">else</span> nodes[u].h = <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> u, <span class="keyword">int</span> height)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(nodes[u].l == left &amp;&amp; nodes[u].r == right &amp;&amp; nodes[u].h &gt;= <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(nodes[u].h == <span class="number">0</span>)&#123;</div><div class="line">                nodes[u].h = height;</div><div class="line">                nodes[u].lazy = <span class="literal">true</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nodes[u].h &lt; height)&#123;</div><div class="line">                nodes[u].h = height;</div><div class="line">                nodes[u].lazy = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        pushdown(u);</div><div class="line">        <span class="keyword">int</span> mid = MID(nodes[u].l, nodes[u].r);</div><div class="line">        <span class="keyword">if</span>(right &lt;= mid)&#123;</div><div class="line">            update(left, right, L(u), height);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(left &gt;= mid)&#123;</div><div class="line">            update(left, right, R(u), height);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            update(left, mid, L(u), height);</div><div class="line">            update(mid, right, R(u), height);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        pushup(u);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> &amp;right, <span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (nodes[u].l == left &amp;&amp; nodes[u].h &gt;= <span class="number">0</span>) &#123;</div><div class="line">			right = nodes[u].r;</div><div class="line">			<span class="keyword">return</span> nodes[u].h;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">int</span> mid = MID(nodes[u].l, nodes[u].r);</div><div class="line">		<span class="keyword">if</span> (left &gt;= mid) &#123;</div><div class="line">			<span class="keyword">return</span> query(left, right, R(u));</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> query(left, right, L(u));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    </div><div class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; getSkyline(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; bs) &#123;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> b : bs)&#123;</div><div class="line">            s.insert(b[<span class="number">0</span>]);</div><div class="line">            s.insert(b[<span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; aux(s.begin(), s.end());</div><div class="line">        <span class="keyword">int</span> n = aux.size();</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> &#123;&#125;;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) m[aux[i]] = i+<span class="number">1</span>;</div><div class="line">        </div><div class="line">        SegTree tree;</div><div class="line">        tree.build(<span class="number">1</span>, n+<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> b : bs) tree.update(m[b[<span class="number">0</span>]], m[b[<span class="number">1</span>]], <span class="number">1</span>, b[<span class="number">2</span>]);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> left = <span class="number">1</span>, right = <span class="number">-1</span>, pre = <span class="number">-1</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; res;</div><div class="line">        <span class="keyword">while</span>(right &lt; n)&#123;</div><div class="line">            <span class="keyword">int</span> height = tree.query(left, right, <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span>(res.empty() || height != res.back().second) res.push_back(&#123;aux[left<span class="number">-1</span>], height&#125;);</div><div class="line">            </div><div class="line">            left = right;</div><div class="line">        &#125;</div><div class="line">        res.push_back(&#123;aux[right<span class="number">-1</span>], <span class="number">0</span>&#125;);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;p&gt;Segment tree update and query.&lt;/p&gt;
&lt;h2 id=&quot;Cod
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 38 - Count and Say</title>
    <link href="https://crazyxy.github.io/2016/10/19/LeetCode-38-Count-and-Say/"/>
    <id>https://crazyxy.github.io/2016/10/19/LeetCode-38-Count-and-Say/</id>
    <published>2016-10-19T05:32:09.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote>
<p>Just do it.</p>
</blockquote>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="built_in">string</span> res = <span class="string">"1"</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)&#123;</div><div class="line">            <span class="keyword">int</span> len = res.length();</div><div class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">            <span class="built_in">string</span> tmp;</div><div class="line">            <span class="keyword">while</span>(j &lt; len)&#123;</div><div class="line">                <span class="keyword">int</span> k = j;</div><div class="line">                <span class="keyword">while</span>(k &lt; len &amp;&amp; res[k] == res[j]) k ++;</div><div class="line">                tmp += to_string(k - j) + res[j];</div><div class="line">                j = k;</div><div class="line">            &#125;</div><div class="line">            res = tmp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Just do it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 56 - Merge Intervals</title>
    <link href="https://crazyxy.github.io/2016/10/19/LeetCode-56-Merge-Intervals/"/>
    <id>https://crazyxy.github.io/2016/10/19/LeetCode-56-Merge-Intervals/</id>
    <published>2016-10-19T05:10:30.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote>
<p>Just do it.</p>
</blockquote>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for an interval.</div><div class="line"> * struct Interval &#123;</div><div class="line"> *     int start;</div><div class="line"> *     int end;</div><div class="line"> *     Interval() : start(0), end(0) &#123;&#125;</div><div class="line"> *     Interval(int s, int e) : start(s), end(e) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;Interval&gt; merge(<span class="built_in">vector</span>&lt;Interval&gt;&amp; arr) &#123;</div><div class="line">        <span class="keyword">int</span> n = arr.size();</div><div class="line">        <span class="keyword">if</span>(!n) <span class="keyword">return</span> &#123;&#125;;</div><div class="line">        </div><div class="line">        sort(arr.begin(), arr.end(), [](<span class="keyword">const</span> Interval&amp; lhs, <span class="keyword">const</span> Interval&amp; rhs)&#123;</div><div class="line">            <span class="keyword">if</span>(lhs.start == rhs.start) <span class="keyword">return</span> lhs.end &lt; rhs.end;</div><div class="line">            <span class="keyword">return</span> lhs.start &lt; rhs.start;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> left = arr[<span class="number">0</span>].start, right = arr[<span class="number">0</span>].end;</div><div class="line">        <span class="built_in">vector</span>&lt;Interval&gt; res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)&#123;</div><div class="line">            <span class="keyword">if</span>(arr[i].start &lt;= right) right = max(right, arr[i].end);</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                res.push_back(&#123;left, right&#125;);</div><div class="line">                left = arr[i].start;</div><div class="line">                right = arr[i].end;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        res.push_back(&#123;left, right&#125;);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Just do it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 165 - Compare Version Numbers</title>
    <link href="https://crazyxy.github.io/2016/10/19/LeetCode-165-Compare-Version-Numbers/"/>
    <id>https://crazyxy.github.io/2016/10/19/LeetCode-165-Compare-Version-Numbers/</id>
    <published>2016-10-19T04:49:37.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote>
<p>Just do it.</p>
</blockquote>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compareVersion</span><span class="params">(<span class="built_in">string</span> version1, <span class="built_in">string</span> version2)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> m = version1.length(), n = version2.length(), i = <span class="number">0</span>, j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i &lt; m &amp;&amp; j &lt; n)&#123;</div><div class="line">            <span class="keyword">int</span> ii = i, jj = j;</div><div class="line">            <span class="keyword">while</span>(ii &lt; m &amp;&amp; version1[ii] != <span class="string">'.'</span>) ii ++;</div><div class="line">            <span class="keyword">while</span>(jj &lt; n &amp;&amp; version2[jj] != <span class="string">'.'</span>) jj ++;</div><div class="line">            <span class="built_in">string</span> lhs = version1.substr(i, ii - i);</div><div class="line">            <span class="built_in">string</span> rhs = version2.substr(j, jj - j);</div><div class="line">            <span class="keyword">if</span>(stoi(lhs) &gt; stoi(rhs)) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(stoi(lhs) &lt; stoi(rhs)) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">            i = ii + <span class="number">1</span>;</div><div class="line">            j = jj + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(i &gt;= m &amp;&amp; j &gt;= n) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i &gt; m)&#123;</div><div class="line">            <span class="keyword">while</span>(j &lt; n &amp;&amp; (version2[j] == <span class="string">'.'</span> || version2[j] == <span class="string">'0'</span>)) j ++;</div><div class="line">            <span class="keyword">if</span>(j == n) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">while</span>(i &lt; m &amp;&amp; (version1[i] == <span class="string">'.'</span> || version1[i] == <span class="string">'0'</span>)) i ++;</div><div class="line">            <span class="keyword">if</span>(i == m) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Just do it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 258 - Add Digits</title>
    <link href="https://crazyxy.github.io/2016/10/19/LeetCode-258-Add-Digits/"/>
    <id>https://crazyxy.github.io/2016/10/19/LeetCode-258-Add-Digits/</id>
    <published>2016-10-19T03:32:16.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote>
<p>Just do it.</p>
</blockquote>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addDigits</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> num % <span class="number">9</span> || !num ? num % <span class="number">9</span> : <span class="number">9</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Just do it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 121 - Best Time to Buy and Sell Stock</title>
    <link href="https://crazyxy.github.io/2016/10/19/LeetCode-121-Best-Time-to-Buy-and-Sell-Stock/"/>
    <id>https://crazyxy.github.io/2016/10/19/LeetCode-121-Best-Time-to-Buy-and-Sell-Stock/</id>
    <published>2016-10-19T03:27:18.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Record the maximum price <code>max_i</code> after the <code>i</code>th day and the maximum profit is the maximum value among all <code>p_i-max_i</code>. </p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = prices.size(), res = <span class="number">0</span>, maxprice = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --)&#123;</div><div class="line">            maxprice = max(maxprice, prices[i]);</div><div class="line">            res = max(maxprice - prices[i], res);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;p&gt;Record the maximum price &lt;code&gt;max_i&lt;/code&gt; af
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 168 - Excel Sheet Column Title</title>
    <link href="https://crazyxy.github.io/2016/10/19/LeetCode-168-Excel-Sheet-Column-Title/"/>
    <id>https://crazyxy.github.io/2016/10/19/LeetCode-168-Excel-Sheet-Column-Title/</id>
    <published>2016-10-19T03:23:35.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote>
<p>Just do it.</p>
</blockquote>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">convertToTitle</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="built_in">string</span> res;</div><div class="line">        <span class="keyword">while</span>(n)&#123;</div><div class="line">            n --;</div><div class="line">            <span class="keyword">int</span> x = n % <span class="number">26</span>;</div><div class="line">            n /= <span class="number">26</span>;</div><div class="line">            </div><div class="line">            res = <span class="keyword">char</span>(<span class="string">'A'</span>+x) + res;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Just do it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 28 - Implement strStr()</title>
    <link href="https://crazyxy.github.io/2016/10/19/LeetCode-28-Implement-strStr/"/>
    <id>https://crazyxy.github.io/2016/10/19/LeetCode-28-Implement-strStr/</id>
    <published>2016-10-19T03:03:58.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>KMP algorithm.</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; getNext(<span class="built_in">string</span> pat)&#123;</div><div class="line">        <span class="keyword">int</span> n = pat.length();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; next(n, <span class="number">0</span>);</div><div class="line">        next[<span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line">        next[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i ++)&#123;</div><div class="line">            <span class="keyword">int</span> j = next[i - <span class="number">1</span>];</div><div class="line">            <span class="keyword">while</span>(j != <span class="number">-1</span> &amp;&amp; pat[j] != pat[i<span class="number">-1</span>]) j = next[j];</div><div class="line">            next[i] = j + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> next;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(<span class="built_in">string</span> haystack, <span class="built_in">string</span> needle)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> m = haystack.length(), n = needle.length(), i = <span class="number">0</span>, j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; next = getNext(needle);</div><div class="line">        <span class="keyword">while</span>(i &lt; m &amp;&amp; j &lt; n)&#123;</div><div class="line">            <span class="keyword">if</span>(haystack[i] == needle[j])&#123;</div><div class="line">                i ++;</div><div class="line">                j ++;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                j = next[j];</div><div class="line">                <span class="keyword">if</span>(j == <span class="number">-1</span>)&#123;</div><div class="line">                    i ++;</div><div class="line">                    j ++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(j != n) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> i - n;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;p&gt;KMP algorithm.&lt;/p&gt;
&lt;h2 id=&quot;Code&quot;&gt;&lt;a href=&quot;#Cod
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 215 - Kth Largest Element in an Array</title>
    <link href="https://crazyxy.github.io/2016/10/19/LeetCode-215-Kth-Largest-Element-in-an-Array/"/>
    <id>https://crazyxy.github.io/2016/10/19/LeetCode-215-Kth-Largest-Element-in-an-Array/</id>
    <published>2016-10-19T02:47:34.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Using priority queue. </p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt;&gt; pq;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x : nums)&#123;</div><div class="line">            <span class="keyword">if</span>(pq.size() &lt; k) pq.push(x);</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span>(x &gt; pq.top())&#123;</div><div class="line">                    pq.pop();</div><div class="line">                    pq.push(x);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> pq.top();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;p&gt;Using priority queue. &lt;/p&gt;
&lt;h2 id=&quot;Code&quot;&gt;&lt;a hr
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 413 - Arithmetic Slices</title>
    <link href="https://crazyxy.github.io/2016/10/18/LeetCode-413-Arithmetic-Slices/"/>
    <id>https://crazyxy.github.io/2016/10/18/LeetCode-413-Arithmetic-Slices/</id>
    <published>2016-10-18T08:36:29.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>The answer of arithmetic sequence with length <code>n</code> is <code>(n-1)*(n-2)/2</code>.</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfArithmeticSlices</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = A.size(), i = <span class="number">0</span>, res = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i &lt; n)&#123;</div><div class="line">            <span class="keyword">int</span> j = i + <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(j == n) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">int</span> diff = A[j] - A[i];</div><div class="line">            <span class="keyword">while</span>(j &lt; n &amp;&amp; diff == A[j] - A[j<span class="number">-1</span>]) j ++;</div><div class="line">            </div><div class="line">            <span class="keyword">int</span> x = j - i;</div><div class="line">            res += (x<span class="number">-1</span>) * (x<span class="number">-2</span>) / <span class="number">2</span>;</div><div class="line">            </div><div class="line">            i = j - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;p&gt;The answer of arithmetic sequence with length 
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 416 - Partition Equal Subset Sum</title>
    <link href="https://crazyxy.github.io/2016/10/18/LeetCode-416-Partition-Equal-Subset-Sum/"/>
    <id>https://crazyxy.github.io/2016/10/18/LeetCode-416-Partition-Equal-Subset-Sum/</id>
    <published>2016-10-18T08:17:39.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Dynamic programming.</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canPartition</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = nums.size(), sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x : nums) sum += x;</div><div class="line">        <span class="keyword">if</span>(sum % <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        sum /= <span class="number">2</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; dp(sum+<span class="number">1</span>, <span class="literal">false</span>);</div><div class="line">        dp[<span class="number">0</span>] = <span class="literal">true</span>;</div><div class="line">        sort(nums.begin(), nums.end());</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = sum; j &gt;= nums[i]; j --)&#123;</div><div class="line">                dp[j] = dp[j] || dp[j-nums[i]];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[sum];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;p&gt;Dynamic programming.&lt;/p&gt;
&lt;h2 id=&quot;Code&quot;&gt;&lt;a href
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 410 - Split Array Largest Sum</title>
    <link href="https://crazyxy.github.io/2016/10/18/LeetCode-410-Split-Array-Largest-Sum/"/>
    <id>https://crazyxy.github.io/2016/10/18/LeetCode-410-Split-Array-Largest-Sum/</id>
    <published>2016-10-18T08:03:53.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Binary search. For each sum, find the minimum groups that the array can be divided. If the number of groups is less than <code>m</code>, the sum is valid; otherwise the sum is invalid.</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> m, <span class="keyword">long</span> <span class="keyword">long</span> t)</span></span>&#123;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>, cnt = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x : nums)&#123;</div><div class="line">            <span class="keyword">if</span>(x &gt; t) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(sum + x &lt;= t) sum += x;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                cnt++;</div><div class="line">                sum = x;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        cnt ++;</div><div class="line">        <span class="keyword">return</span> cnt &lt;= m;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">splitArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = nums.size();</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>, maxnum = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x : nums)&#123;</div><div class="line">            maxnum = max&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;(maxnum, x);</div><div class="line">            sum += x;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> left = <span class="number">0</span>, right = sum, res = right;</div><div class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</div><div class="line">            </div><div class="line">            <span class="keyword">long</span> <span class="keyword">long</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(check(nums, m, mid))&#123;</div><div class="line">                res = min(res, mid);</div><div class="line">                right = mid - <span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span> left = mid + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;p&gt;Binary search. For each sum, find the minimum 
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 419 - Battleships in a Board</title>
    <link href="https://crazyxy.github.io/2016/10/18/LeetCode-419-Battleships-in-a-Board/"/>
    <id>https://crazyxy.github.io/2016/10/18/LeetCode-419-Battleships-in-a-Board/</id>
    <published>2016-10-18T05:57:57.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>DFS or Union Set.</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">int</span> m, n;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; vis;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt; g;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">        vis[r][c] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++)&#123;</div><div class="line">            <span class="keyword">int</span> rr = r + dir[i][<span class="number">0</span>];</div><div class="line">            <span class="keyword">int</span> cc = c + dir[i][<span class="number">1</span>];</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(rr &gt;= <span class="number">0</span> &amp;&amp; rr &lt; m &amp;&amp; cc &gt;= <span class="number">0</span> &amp;&amp; cc &lt; n &amp;&amp; !vis[rr][cc] &amp;&amp; g[rr][cc] == <span class="string">'X'</span>)&#123;</div><div class="line">                dfs(rr, cc);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countBattleships</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</div><div class="line">        m = board.size();</div><div class="line">        <span class="keyword">if</span>(!m) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        n = board[<span class="number">0</span>].size();</div><div class="line">        g = board;</div><div class="line">        vis.assign(m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n, <span class="number">0</span>));</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++)&#123;</div><div class="line">                <span class="keyword">if</span>(board[i][j] == <span class="string">'X'</span> &amp;&amp; !vis[i][j])&#123;</div><div class="line">                    res ++;</div><div class="line">                    dfs(i, j);</div><div class="line">                &#125; </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;p&gt;DFS or Union Set.&lt;/p&gt;
&lt;h2 id=&quot;Code&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 423 - Reconstruct Original Digits from English</title>
    <link href="https://crazyxy.github.io/2016/10/18/LeetCode-423-Reconstruct-Original-Digits-from-English/"/>
    <id>https://crazyxy.github.io/2016/10/18/LeetCode-423-Reconstruct-Original-Digits-from-English/</id>
    <published>2016-10-18T05:27:22.000Z</published>
    <updated>2017-05-06T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Extract feature character of each string. For example, <code>z</code> for <code>one</code>.</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">originalDigits</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="built_in">string</span> str[] = &#123;<span class="string">"zero"</span>, <span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>, <span class="string">"five"</span>, <span class="string">"six"</span>, <span class="string">"seven"</span>, <span class="string">"eight"</span>, <span class="string">"nine"</span>&#125;;</div><div class="line">        <span class="keyword">int</span> cnt[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;, x[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> ch : s) cnt[ch-<span class="string">'a'</span>] ++;</div><div class="line">        </div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">char</span>&gt;&gt; vec &#123;&#123;<span class="number">0</span>, <span class="string">'z'</span>&#125;, &#123;<span class="number">2</span>, <span class="string">'w'</span>&#125;, &#123;<span class="number">4</span>, <span class="string">'u'</span>&#125;, &#123;<span class="number">6</span>, <span class="string">'x'</span>&#125;, &#123;<span class="number">8</span>, <span class="string">'g'</span>&#125;, &#123;<span class="number">1</span>, <span class="string">'o'</span>&#125;, &#123;<span class="number">3</span>, <span class="string">'r'</span>&#125;, &#123;<span class="number">5</span>, <span class="string">'f'</span>&#125;, &#123;<span class="number">7</span>, <span class="string">'v'</span>&#125;, &#123;<span class="number">9</span>, <span class="string">'i'</span>&#125;&#125;;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> p : vec)&#123;</div><div class="line">            x[p.first] += cnt[p.second-<span class="string">'a'</span>];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> ch : str[p.first]) cnt[ch-<span class="string">'a'</span>] -= x[p.first];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">string</span> res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</div><div class="line">            res += <span class="built_in">string</span>(x[i], <span class="string">'0'</span>+i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;p&gt;Extract feature character of each string. For 
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://crazyxy.github.io/tags/LeetCode/"/>
    
  </entry>
  
</feed>
